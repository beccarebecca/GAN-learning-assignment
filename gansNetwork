{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "ga nn",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/beccarebecca/GAN-learning-assignment/blob/master/gansNetwork\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8P66lM2o0w5q",
        "colab_type": "code",
        "outputId": "5f7d4f08-d21c-45e6-951b-23c5244c400b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 402
        }
      },
      "source": [
        "\n",
        "!pip install tensorflow==2.0.0-alpha0\n",
        "import glob\n",
        "import imageio\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import os \n",
        "from IPython import display\n",
        "import PIL\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras import layers\n",
        "import time\n",
        "from __future__ import absolute_import,division,print_function, unicode_literals\n",
        "from keras.optimizers import Adam\n",
        "\n",
        "from keras import initializers\n",
        "!pip install -q imageio\n",
        "from keras.layers import LeakyReLU\n",
        "\n",
        "print(tf.__version__)\n"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: tensorflow==2.0.0-alpha0 in /usr/local/lib/python3.6/dist-packages (2.0.0a0)\n",
            "Requirement already satisfied: protobuf>=3.6.1 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.0.0-alpha0) (3.7.1)\n",
            "Requirement already satisfied: google-pasta>=0.1.2 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.0.0-alpha0) (0.1.7)\n",
            "Requirement already satisfied: keras-applications>=1.0.6 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.0.0-alpha0) (1.0.8)\n",
            "Requirement already satisfied: tb-nightly<1.14.0a20190302,>=1.14.0a20190301 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.0.0-alpha0) (1.14.0a20190301)\n",
            "Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.0.0-alpha0) (1.1.0)\n",
            "Requirement already satisfied: six>=1.10.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.0.0-alpha0) (1.12.0)\n",
            "Requirement already satisfied: astor>=0.6.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.0.0-alpha0) (0.8.0)\n",
            "Requirement already satisfied: gast>=0.2.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.0.0-alpha0) (0.2.2)\n",
            "Requirement already satisfied: grpcio>=1.8.6 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.0.0-alpha0) (1.15.0)\n",
            "Requirement already satisfied: wheel>=0.26 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.0.0-alpha0) (0.33.6)\n",
            "Requirement already satisfied: absl-py>=0.7.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.0.0-alpha0) (0.8.0)\n",
            "Requirement already satisfied: numpy<2.0,>=1.14.5 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.0.0-alpha0) (1.16.5)\n",
            "Requirement already satisfied: keras-preprocessing>=1.0.5 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.0.0-alpha0) (1.1.0)\n",
            "Requirement already satisfied: tf-estimator-nightly<1.14.0.dev2019030116,>=1.14.0.dev2019030115 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.0.0-alpha0) (1.14.0.dev2019030115)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.6/dist-packages (from protobuf>=3.6.1->tensorflow==2.0.0-alpha0) (41.2.0)\n",
            "Requirement already satisfied: h5py in /usr/local/lib/python3.6/dist-packages (from keras-applications>=1.0.6->tensorflow==2.0.0-alpha0) (2.8.0)\n",
            "Requirement already satisfied: werkzeug>=0.11.15 in /usr/local/lib/python3.6/dist-packages (from tb-nightly<1.14.0a20190302,>=1.14.0a20190301->tensorflow==2.0.0-alpha0) (0.16.0)\n",
            "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.6/dist-packages (from tb-nightly<1.14.0a20190302,>=1.14.0a20190301->tensorflow==2.0.0-alpha0) (3.1.1)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "Using TensorFlow backend.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "2.0.0-alpha0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5Vs2HOqq10Kt",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "\n",
        "bufferS = 60000\n",
        "batchS = 256\n",
        "\n",
        "from keras.datasets import fashion_mnist\n",
        "(train_img, train_labes), (_, _) = tf.keras.datasets.fashion_mnist.load_data()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "M2_AcBSV4X5k",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "train_img = train_img.reshape(train_img.shape[0], 28, 28, 1).astype('float32')\n",
        "train_img = (train_img - 127.5)/ 127.5"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "t-tkCEGB4YIq",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "\n",
        "# shuffle the data\n",
        "Shuffle_train_set = tf.data.Dataset.from_tensor_slices(train_img).batch(bufferS)\n",
        "\n",
        "init = initializers.RandomNormal(stddev = 0.02)\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YCRkNBFI4YW7",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# making a generator\n",
        "# up sampling noise to make the right size from random pixels.\n",
        "\n",
        "def generatorModelMaker():\n",
        "  mod = tf.keras.Sequential()\n",
        "  \n",
        "  mod.add(layers.Dense(7*7*256, use_bias = False, input_shape = (100,)))\n",
        "  mod.add(layers.BatchNormalization())\n",
        "  \n",
        "  mod.add(layers.LeakyReLU(alpha=0.3))\n",
        "  mod.add(layers.Reshape((7,7,256)))\n",
        "  assert mod.output_shape ==(None,7, 7, 256)\n",
        "  \n",
        "  mod.add(layers.Conv2DTranspose(128, (5, 5,) , strides = (1, 1), padding = 'same', use_bias =  False))\n",
        "  assert mod.output_shape ==(None,7, 7, 128)\n",
        "  mod.add(layers.BatchNormalization())\n",
        "  \n",
        "\n",
        "  \n",
        "  mod.add(layers.LeakyReLU(alpha=0.3)) \n",
        "  \n",
        "  mod.add(layers.Conv2DTranspose(64, (5, 5,) , strides = (2, 2), padding = 'same', use_bias =  False))\n",
        "  assert mod.output_shape ==(None,14, 14, 64)\n",
        "  mod.add(layers.BatchNormalization())\n",
        "  \n",
        "  \n",
        "  \n",
        "  mod.add(layers.LeakyReLU(alpha=0.3))\n",
        "  \n",
        "  mod.add(layers.Conv2DTranspose(1,(5,5), strides = (2,2), padding = 'same' , use_bias = False, activation='tanh'))\n",
        "  assert mod.output_shape ==(None,28, 28, 1)\n",
        "  \n",
        "  return mod\n",
        "    \n",
        "    "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VabX3DjJ4Yjg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "generate = generatorModelMaker()\n",
        "z = np.random.normal(loc= 0 , scale = 1, size = (batchS, 100))\n",
        "\n",
        "GenImg = generate(z, training = False)\n",
        "#plt.imshow(GenImg[0,:,:, 0], cmap = 'gray')\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zdFln22vdWLM",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def detective_model():\n",
        "  detective = tf.keras.Sequential()\n",
        "  detective.add(layers.Conv2D(64, (5,5), strides = (2, 2), padding = 'same', input_shape=[28,28,1]))\n",
        "  detective.add(layers.LeakyReLU(alpha=0.3))\n",
        "  detective.add(layers.Dropout(0.3))\n",
        "  \n",
        "  detective.add(layers.Conv2D(128, (5,5), strides = (2, 2), padding = 'same'))\n",
        "  detective.add(layers.LeakyReLU(alpha=0.3))\n",
        "  detective.add(layers.Dropout(0.3))\n",
        "  detective.add(layers.Flatten())\n",
        "  detective.add(layers.Dense(1))\n",
        "  \n",
        "  return detective\n",
        "  \n",
        "    "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZrVS2ul8gXqt",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "81ec878a-968e-435b-c557-a007a1b5bc8a"
      },
      "source": [
        "verdict = detective_model()\n",
        "opinion = verdict(GenImg)\n",
        "print(opinion)"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "tf.Tensor(\n",
            "[[ 7.3998673e-03]\n",
            " [ 3.5081648e-03]\n",
            " [ 8.3497469e-04]\n",
            " [ 1.2790877e-03]\n",
            " [ 4.5939581e-04]\n",
            " [-1.0405632e-03]\n",
            " [ 2.5075651e-03]\n",
            " [ 4.7281580e-03]\n",
            " [ 2.3014520e-03]\n",
            " [ 3.7386881e-03]\n",
            " [ 2.1579727e-03]\n",
            " [ 2.1917426e-03]\n",
            " [ 2.5505814e-04]\n",
            " [ 7.2035269e-04]\n",
            " [ 1.5565805e-03]\n",
            " [ 5.2126185e-03]\n",
            " [ 2.7273698e-03]\n",
            " [ 2.5550839e-03]\n",
            " [ 3.2994291e-03]\n",
            " [ 4.7043837e-03]\n",
            " [-1.1452450e-03]\n",
            " [ 2.3251148e-03]\n",
            " [ 2.2849198e-03]\n",
            " [ 3.3587767e-03]\n",
            " [ 1.1455397e-03]\n",
            " [ 1.4499435e-03]\n",
            " [ 3.0720544e-03]\n",
            " [ 1.0965816e-03]\n",
            " [ 9.4189181e-04]\n",
            " [ 4.0489910e-03]\n",
            " [ 3.1281093e-03]\n",
            " [ 9.4759080e-04]\n",
            " [ 1.3333019e-03]\n",
            " [ 5.4842234e-03]\n",
            " [ 1.6378176e-03]\n",
            " [-1.1076046e-03]\n",
            " [ 1.8240429e-03]\n",
            " [ 2.7257279e-03]\n",
            " [ 3.3420746e-03]\n",
            " [ 3.0849574e-03]\n",
            " [ 4.4361423e-03]\n",
            " [ 2.9658750e-03]\n",
            " [ 3.0719447e-03]\n",
            " [ 3.5188771e-03]\n",
            " [ 1.1771588e-03]\n",
            " [-8.2077080e-04]\n",
            " [ 1.4322464e-03]\n",
            " [ 1.7926437e-03]\n",
            " [ 3.8216310e-03]\n",
            " [ 3.6276556e-03]\n",
            " [ 2.4106868e-03]\n",
            " [ 2.6856444e-03]\n",
            " [ 2.5412824e-04]\n",
            " [ 1.6039883e-03]\n",
            " [ 3.0836817e-03]\n",
            " [ 3.1651421e-03]\n",
            " [ 8.8989577e-04]\n",
            " [ 7.3450664e-04]\n",
            " [ 4.2337151e-03]\n",
            " [ 2.7630902e-03]\n",
            " [ 5.5347482e-04]\n",
            " [ 2.9660889e-03]\n",
            " [-7.3812495e-05]\n",
            " [ 3.0602566e-03]\n",
            " [ 2.1279640e-03]\n",
            " [ 1.8924159e-03]\n",
            " [ 6.4566894e-04]\n",
            " [ 3.1739043e-03]\n",
            " [ 4.0821056e-03]\n",
            " [ 2.1311841e-03]\n",
            " [ 2.8762985e-03]\n",
            " [ 6.0636771e-04]\n",
            " [ 2.2319278e-03]\n",
            " [ 1.4200183e-03]\n",
            " [ 2.2587883e-03]\n",
            " [-1.5091716e-04]\n",
            " [ 2.6600510e-03]\n",
            " [ 2.4186969e-03]\n",
            " [ 1.3729678e-03]\n",
            " [ 1.5773308e-03]\n",
            " [ 5.7930648e-03]\n",
            " [ 2.5422489e-03]\n",
            " [ 1.5149801e-03]\n",
            " [ 1.7918625e-03]\n",
            " [ 1.7435616e-03]\n",
            " [ 3.0311435e-03]\n",
            " [ 2.5059048e-03]\n",
            " [ 2.8662144e-03]\n",
            " [-2.1340931e-04]\n",
            " [ 1.7486594e-03]\n",
            " [ 1.8163716e-03]\n",
            " [ 2.5692987e-03]\n",
            " [-1.3183418e-03]\n",
            " [ 1.7223048e-03]\n",
            " [ 2.1676754e-03]\n",
            " [ 3.0669165e-03]\n",
            " [ 7.3517242e-04]\n",
            " [ 3.2991911e-03]\n",
            " [-2.9844814e-03]\n",
            " [ 1.6052052e-03]\n",
            " [ 3.5248222e-03]\n",
            " [-1.3456668e-03]\n",
            " [ 4.3435837e-03]\n",
            " [ 3.3948261e-03]\n",
            " [ 5.3984961e-03]\n",
            " [ 2.8744680e-03]\n",
            " [ 5.1263608e-03]\n",
            " [ 7.3227705e-04]\n",
            " [ 2.3512957e-03]\n",
            " [ 1.6315721e-03]\n",
            " [ 1.3324635e-03]\n",
            " [ 3.1930814e-04]\n",
            " [ 5.6109196e-03]\n",
            " [ 6.3091482e-04]\n",
            " [ 2.5592267e-03]\n",
            " [ 2.1648649e-03]\n",
            " [ 3.5346719e-03]\n",
            " [ 2.3420439e-03]\n",
            " [ 1.5789970e-03]\n",
            " [ 2.6441019e-03]\n",
            " [ 3.6325948e-03]\n",
            " [ 1.6000716e-03]\n",
            " [ 2.0454149e-03]\n",
            " [ 1.8573451e-03]\n",
            " [ 1.8196555e-03]\n",
            " [ 5.9163775e-03]\n",
            " [ 8.9363422e-04]\n",
            " [ 2.9502171e-03]\n",
            " [-1.1228326e-03]\n",
            " [ 5.3907149e-03]\n",
            " [ 1.9704797e-03]\n",
            " [ 1.9708839e-03]\n",
            " [ 2.0152209e-03]\n",
            " [ 4.3160338e-03]\n",
            " [ 1.9064406e-03]\n",
            " [ 1.2236733e-03]\n",
            " [ 5.6705493e-03]\n",
            " [ 2.7393657e-03]\n",
            " [ 2.7439632e-03]\n",
            " [ 2.1266332e-03]\n",
            " [ 4.7285203e-03]\n",
            " [ 1.5852158e-03]\n",
            " [ 2.7124858e-03]\n",
            " [ 3.2615438e-03]\n",
            " [ 3.0861914e-03]\n",
            " [ 3.1088064e-03]\n",
            " [ 5.5801617e-03]\n",
            " [ 5.2936454e-03]\n",
            " [ 1.1552918e-03]\n",
            " [ 2.6905374e-03]\n",
            " [ 2.5581790e-03]\n",
            " [ 2.3267269e-03]\n",
            " [ 2.5077814e-03]\n",
            " [ 2.1556455e-03]\n",
            " [ 1.1024042e-04]\n",
            " [ 4.7792657e-04]\n",
            " [ 1.6426980e-03]\n",
            " [ 2.7422667e-03]\n",
            " [ 3.6410609e-05]\n",
            " [ 2.4128091e-03]\n",
            " [ 3.0552035e-03]\n",
            " [-1.9433344e-04]\n",
            " [ 4.8364789e-04]\n",
            " [ 9.4729522e-04]\n",
            " [ 1.1325798e-03]\n",
            " [-1.4313939e-04]\n",
            " [ 3.6006873e-03]\n",
            " [ 4.6722912e-03]\n",
            " [ 8.3571515e-04]\n",
            " [ 2.9599499e-03]\n",
            " [ 1.8854508e-03]\n",
            " [ 2.9273771e-03]\n",
            " [-3.5185553e-04]\n",
            " [ 1.7797076e-03]\n",
            " [ 2.5279805e-04]\n",
            " [ 5.9204064e-03]\n",
            " [ 3.4934916e-03]\n",
            " [ 5.7340524e-04]\n",
            " [ 1.8347802e-03]\n",
            " [ 1.1021760e-04]\n",
            " [ 9.8203484e-04]\n",
            " [ 4.9780561e-03]\n",
            " [ 6.6132974e-03]\n",
            " [ 1.0146638e-03]\n",
            " [ 4.1646976e-03]\n",
            " [ 5.5068126e-03]\n",
            " [ 1.7667795e-03]\n",
            " [ 3.9525731e-03]\n",
            " [ 5.0991341e-03]\n",
            " [ 1.6492510e-03]\n",
            " [ 2.7995100e-03]\n",
            " [-1.1131815e-03]\n",
            " [ 3.9194874e-03]\n",
            " [ 3.9833258e-03]\n",
            " [ 1.5702996e-03]\n",
            " [ 1.5299490e-03]\n",
            " [ 2.1200341e-03]\n",
            " [ 1.3466669e-03]\n",
            " [ 2.6599213e-04]\n",
            " [ 2.5823826e-03]\n",
            " [-1.2253749e-04]\n",
            " [ 2.8308993e-03]\n",
            " [ 2.6323325e-03]\n",
            " [ 2.4735341e-03]\n",
            " [ 2.4774442e-03]\n",
            " [ 3.7054212e-03]\n",
            " [ 2.6720986e-03]\n",
            " [ 4.7531300e-03]\n",
            " [ 9.8371436e-04]\n",
            " [ 1.7080470e-03]\n",
            " [ 3.9894483e-03]\n",
            " [ 2.8528064e-03]\n",
            " [ 1.0574185e-03]\n",
            " [ 3.3767007e-03]\n",
            " [ 2.3188670e-03]\n",
            " [ 2.9432839e-03]\n",
            " [ 2.5319601e-03]\n",
            " [ 1.2428390e-03]\n",
            " [ 2.9430431e-03]\n",
            " [ 1.2349555e-03]\n",
            " [ 1.0954585e-03]\n",
            " [ 1.7696202e-03]\n",
            " [ 3.0126707e-03]\n",
            " [ 3.1878790e-03]\n",
            " [-1.0488770e-03]\n",
            " [ 4.4563841e-03]\n",
            " [ 2.9922216e-03]\n",
            " [-1.4666608e-04]\n",
            " [ 2.3668746e-03]\n",
            " [-1.6208738e-05]\n",
            " [ 1.2832950e-03]\n",
            " [ 1.0082376e-03]\n",
            " [ 3.1537339e-03]\n",
            " [ 5.3916462e-03]\n",
            " [-7.3585630e-04]\n",
            " [ 2.3669731e-03]\n",
            " [ 9.3084364e-04]\n",
            " [ 3.8724632e-03]\n",
            " [ 2.1871962e-03]\n",
            " [ 1.8330538e-03]\n",
            " [ 1.5716047e-03]\n",
            " [ 4.5778556e-04]\n",
            " [ 1.4210385e-03]\n",
            " [ 2.7378555e-03]\n",
            " [ 2.3356928e-03]\n",
            " [ 2.7193394e-03]\n",
            " [ 7.1077375e-04]\n",
            " [ 3.9031110e-03]\n",
            " [ 3.0434229e-03]\n",
            " [ 2.7479054e-03]\n",
            " [ 4.5218235e-03]\n",
            " [ 3.7286656e-03]\n",
            " [ 1.6210449e-03]\n",
            " [ 5.6408728e-03]\n",
            " [ 1.3478843e-03]\n",
            " [-1.1675706e-04]], shape=(256, 1), dtype=float32)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "87bELrtXgYYD",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "crossEntropy = tf.keras.losses.BinaryCrossentropy(from_logits = True)\n",
        "                                                 "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QxZR-iLfgZ71",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def DiscrLoss(rOutput, wOutput):\n",
        "  correctLoss = crossEntropy(tf.ones_like(rOutput),rOutput)\n",
        "  sneakyLoss = crossEntropy(tf.zeros_like(wOutput),wOutput)\n",
        "  total = correctLoss + sneakyLoss\n",
        "  return total"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7o0XFTAZngQ2",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def genLoss(wOutput):\n",
        "  return crossEntropy(tf.ones_like(wOutput),wOutput)\n",
        "\n",
        "\n",
        "\n",
        "genOptimizer = tf.keras.optimizers.Adam(1e-5)\n",
        "detectiveOptimizer = tf.keras.optimizers.Adam(1e-5)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZUvJysXfngU5",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "checkDir = \"./checks\"\n",
        "checkMerge = os.path.join(checkDir, \"pt\")\n",
        "pointS = tf.train.Checkpoint(genOptimizer = genOptimizer,detectiveOptimizer = detectiveOptimizer, generate = generate,verdict = verdict )"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BavRlL11ngba",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "EPOCHS = 50\n",
        "genDim = 100\n",
        "numberOfGenExamples = 16\n",
        "seed = tf.random.normal([numberOfGenExamples, genDim])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aO-a0Vu-ngYl",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "@tf.function\n",
        "def stepS(imgs):\n",
        "  noise = tf.random.normal([batchS, genDim])\n",
        "  with tf.GradientTape() as genTape, tf.GradientTape() as detTape:\n",
        "    genImgs = generate(noise, training = True)\n",
        "    correctOutput = verdict(imgs, training= True)\n",
        "    sneakyOutput = verdict(genImgs, training = True)\n",
        "    GenLoss = genLoss(sneakyOutput)\n",
        "    DetLoss = DiscrLoss(correctOutput,sneakyOutput)\n",
        "  derivitivesGen = genTape.gradient(GenLoss, generate.trainable_variables)\n",
        "  derivitivesdet = detTape.gradient(DetLoss, verdict.trainable_variables)\n",
        "  genOptimizer.apply_gradients(zip( derivitivesGen, generate.trainable_variables))\n",
        "  detectiveOptimizer.apply_gradients(zip( derivitivesdet, verdict.trainable_variables))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1KNPBe8ingL7",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def train(data, epoch):\n",
        "  for ep in range(epoch):\n",
        "    start = time.time()\n",
        "    for imgB in data:\n",
        "      stepS(imgB)\n",
        "    \n",
        "    display.clear_output(wait = True)\n",
        "    generateImages(generate, ep + 1, seed)\n",
        "    if (ep + 1) % 20 ==0:\n",
        "      pointS.save(file_prefix = checkMerge)\n",
        "      print('epoch {} id {} sec'. format( ep + 1,time.time()-start))\n",
        "    display.clear_output(wait= True)\n",
        "    generateImages(generate, ep, seed)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OjJoO-WK0YVw",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def generateImages(mod, epoch, t_input):\n",
        "  evaluator = mod(t_input, training = False)\n",
        "  pic = plt.figure(figsize=(4,4))\n",
        "  for i in range (evaluator.shape[0]):\n",
        "    plt.subplot(4,4, i + 1)\n",
        "    plt.imshow(evaluator[i, :,:,0] * 127.5 + 127.5, cmap = 'gray')\n",
        "  plt.savefig(\"image{:04d}.png\".format(epoch))\n",
        "    "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qJ_zL07C0Yad",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "train(Shuffle_train_set, EPOCHS)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PtToVsjQ0YRx",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "checkpoint.restore(tf.train.latest_checkpoint(checkDir))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "h6H_XWPL5NsD",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def Final_img(num):\n",
        "  return PIL.image.open(\"image{:04d}.png\". num)\n",
        "Final_img(EPOCH)\n",
        "Final_img(EPOCH - 1)"
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}